#!/bin/bash

set -e


# Expected variables
if [ -z ${OPENVPN+x} ]; then
	echo Error: \$OPENVPN variable is required.
	exit 1
fi


# Hard-coded variables, sorry
export CONTAINER="vpn"
export IMAGE="vpn_vpn"
export OVPN_NAT="1"


# Check $OPENVPN for a server configuration
if [ ! -d $OPENVPN ]; then
	echo $OPENVPN not found!
	exit 1
fi
if [[ ! -e $OPENVPN/openvpn.conf ]]; then
	# The config file hasn't been generated, run genconfig real quick
	#	-d means don't set the default route
	#	-N means "Configure NAT to access external server network"
	#	-p sets custom push directives to set in the server config
	#	-u sets the server's public URL
	ovpn_genconfig -d -N \
		-p "route 172.17.0.0 255.255.0.0" \
		-u udp://$HOSTNAME
fi


# Check for the pki configuration
pki=$OPENVPN/pki
if [ ! -d $pki/issued ] ||
   [ ! -e $pki/ca.crt ] ||
   [ ! -e $pki/issued/${HOSTNAME}.crt ] ||
   [ ! -d $pki/private ] ||
   [ ! -e $pki/private/ca.key ] ||
   [ ! -e $pki/private/${HOSTNAME}.key ] ||
   [ ! -e $pki/ta.key ]
then
	if [ "$1" != "ovpn_initpki" ]; then
		# Let the user know that they need to run the initpki script
		echo -e "PKI configuration not found. You can initialize it now by running:\n"
		echo -e "docker run --rm --volumes-from $CONTAINER -it $IMAGE ovpn_initpki\n"
#		echo -e "Or you can just map in $pki/ using a volume. Make sure to include all the following files at a minimum:\n"
#		echo -e "issued/${HOSTNAME}.crt   Your server certificate"
#		echo -e "issued/ca.crt           Your CA certificate"
#		echo -e "private/${HOSTNAME}.key  Your server private key"
#		echo -e "private/ca.key          Your CA private key"
#		echo -e "ta.key                  Your OpenVPN TLS key"
		exit 1
	fi
fi


# Check for the tunnel device
if [ ! -d /dev/net ]; then
	mkdir -p /dev/net
fi
if [ ! -c /dev/net/tun ]; then
	mknod /dev/net/tun c 10 200
fi


# For IPv6 forwarding, looks like we'll need to run in privileged
#ip -6 route show default 2>/dev/null
#if [ $? = 0 ]; then
#	echo "Enabling IPv6 Forwarding"
#	# If this fails, ensure the docker container is run with --privileged
#	# Could be side stepped with `ip netns` madness to drop privileged flag
#
#	sysctl net.ipv6.conf.default.forwarding=1
#	sysctl net.ipv6.conf.all.forwarding=1
#fi


# Run the given CMD
exec "$@"

